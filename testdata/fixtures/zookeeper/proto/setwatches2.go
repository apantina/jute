// Autogenerated jute compiler
// @generated from '/home/bbennett/src/jute/testdata/zookeeper.jute'

package proto // github.com/go-zookeeper/zk/internal/proto

import (
	"fmt"

	"github.com/go-zookeeper/jute/lib/go/jute"
)

type SetWatches2 struct {
	RelativeZxid               int64    // relativeZxid
	DataWatches                []string // dataWatches
	ExistWatches               []string // existWatches
	ChildWatches               []string // childWatches
	PersistentWatches          []string // persistentWatches
	PersistentRecursiveWatches []string // persistentRecursiveWatches
}

func (r *SetWatches2) Read(dec jute.Decoder) (err error) {
	var size int
	if err = dec.ReadStart(); err != nil {
		return err
	}
	r.RelativeZxid, err = dec.ReadLong()
	if err != nil {
		return err
	}
	size, err = dec.ReadVectorStart()
	if err != nil {
		return err
	}
	r.DataWatches = make([]string, size)
	for i := 0; i < size; i++ {
		r.DataWatches[i], err = dec.ReadUstring()
		if err != nil {
			return err
		}
	}
	if err = dec.ReadVectorEnd(); err != nil {
		return err
	}
	size, err = dec.ReadVectorStart()
	if err != nil {
		return err
	}
	r.ExistWatches = make([]string, size)
	for i := 0; i < size; i++ {
		r.ExistWatches[i], err = dec.ReadUstring()
		if err != nil {
			return err
		}
	}
	if err = dec.ReadVectorEnd(); err != nil {
		return err
	}
	size, err = dec.ReadVectorStart()
	if err != nil {
		return err
	}
	r.ChildWatches = make([]string, size)
	for i := 0; i < size; i++ {
		r.ChildWatches[i], err = dec.ReadUstring()
		if err != nil {
			return err
		}
	}
	if err = dec.ReadVectorEnd(); err != nil {
		return err
	}
	size, err = dec.ReadVectorStart()
	if err != nil {
		return err
	}
	r.PersistentWatches = make([]string, size)
	for i := 0; i < size; i++ {
		r.PersistentWatches[i], err = dec.ReadUstring()
		if err != nil {
			return err
		}
	}
	if err = dec.ReadVectorEnd(); err != nil {
		return err
	}
	size, err = dec.ReadVectorStart()
	if err != nil {
		return err
	}
	r.PersistentRecursiveWatches = make([]string, size)
	for i := 0; i < size; i++ {
		r.PersistentRecursiveWatches[i], err = dec.ReadUstring()
		if err != nil {
			return err
		}
	}
	if err = dec.ReadVectorEnd(); err != nil {
		return err
	}
	if err = dec.ReadEnd(); err != nil {
		return err
	}
	return nil
}

func (r *SetWatches2) Write(enc jute.Encoder) error {
	if err := enc.WriteStart(); err != nil {
		return err
	}
	if err := enc.WriteLong(r.RelativeZxid); err != nil {
		return err
	}
	if err := enc.WriteVectorStart(len(r.DataWatches)); err != nil {
		return err
	}
	for _, v := range r.DataWatches {
		if err := enc.WriteUstring(v); err != nil {
			return err
		}
	}
	if err := enc.WriteVectorEnd(); err != nil {
		return err
	}
	if err := enc.WriteVectorStart(len(r.ExistWatches)); err != nil {
		return err
	}
	for _, v := range r.ExistWatches {
		if err := enc.WriteUstring(v); err != nil {
			return err
		}
	}
	if err := enc.WriteVectorEnd(); err != nil {
		return err
	}
	if err := enc.WriteVectorStart(len(r.ChildWatches)); err != nil {
		return err
	}
	for _, v := range r.ChildWatches {
		if err := enc.WriteUstring(v); err != nil {
			return err
		}
	}
	if err := enc.WriteVectorEnd(); err != nil {
		return err
	}
	if err := enc.WriteVectorStart(len(r.PersistentWatches)); err != nil {
		return err
	}
	for _, v := range r.PersistentWatches {
		if err := enc.WriteUstring(v); err != nil {
			return err
		}
	}
	if err := enc.WriteVectorEnd(); err != nil {
		return err
	}
	if err := enc.WriteVectorStart(len(r.PersistentRecursiveWatches)); err != nil {
		return err
	}
	for _, v := range r.PersistentRecursiveWatches {
		if err := enc.WriteUstring(v); err != nil {
			return err
		}
	}
	if err := enc.WriteVectorEnd(); err != nil {
		return err
	}
	if err := enc.WriteEnd(); err != nil {
		return err
	}
	return nil
}

func (r *SetWatches2) String() string {
	if r == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetWatches2(%+v)", *r)
}
